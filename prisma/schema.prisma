generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  name             String
  password         String
  role             Role               @default(USER)
  quizAttempts     QuizAttempt[]
  payments         Payment[]
  leaderboardEntries LeaderBoardEntry[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Admin {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String
  isSuper   Boolean    @default(false)
  role      Role       @default(ADMIN)
  subAdmins SubAdmin[]
  quizzes   Quiz[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model SubAdmin {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(SUB_ADMIN)
  adminId   String
  admin     Admin    @relation(fields: [adminId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quiz {
  id          String         @id @default(uuid())
  title       String
  description String
  price       Float?         
  adminId     String
  admin       Admin          @relation(fields: [adminId], references: [id])
  questions   Question[]
  attempts    QuizAttempt[]
  leaderboard LeaderBoard?
  payments    Payment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  text          String
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  options       Option[]
  correctAnswer String   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Option {
  id         String   @id @default(uuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuizAttempt {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizId])
}

model LeaderBoard {
  id        String             @id @default(uuid())
  quizId    String            @unique
  quiz      Quiz              @relation(fields: [quizId], references: [id])
  entries   LeaderBoardEntry[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model LeaderBoardEntry {
  id            String      @id @default(uuid())
  leaderboardId String
  leaderboard   LeaderBoard @relation(fields: [leaderboardId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  score         Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([leaderboardId, userId])
}

model Payment {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  status    PaymentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SUB_ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}